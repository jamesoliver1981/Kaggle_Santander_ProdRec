sigma <- sigest(CARAVAN ~ ., data = trainingInd[, noNZVSet], frac = .75)
names(sigma) <- NULL
svmGrid1 <- data.frame(sigma = sigma[2],
C = 2^c(2:10))
set.seed(1401)
svmFit <- train(CARAVAN ~ .,
data = trainingInd[, noNZVSet],
method = "svmRadial",
tuneGrid = svmGrid1,
preProc = c("center", "scale"),
metric = "Kappa",
trControl = ctrl)
svmFit
evalResults$SVM <- predict(svmFit, evaluationInd[, noNZVSet], type = "prob")[,1]
testResults$SVM <- predict(svmFit, testingInd[, noNZVSet], type = "prob")[,1]
svmROC <- roc(evalResults$CARAVAN, evalResults$SVM,
levels = rev(levels(evalResults$CARAVAN)))
svmROC
svmTestROC <- roc(testResults$CARAVAN, testResults$SVM,
levels = rev(levels(testResults$CARAVAN)))
svmTestROC
confusionMatrix(predict(svmFit, evaluationInd[, noNZVSet]), evalResults$CARAVAN)
confusionMatrix(predict(svmFit, testingInd[, noNZVSet]), testingInd$CARAVAN)
set.seed(1401)
svmWtFit <- train(CARAVAN ~ .,
data = trainingInd[, noNZVSet],
method = "svmRadial",
tuneGrid = svmGrid1,
preProc = c("center", "scale"),
metric = "Kappa",
class.weights = c(insurance = 18, noinsurance = 1),
trControl = ctrlNoProb)
svmWtFit
svmWtEvalCM <- confusionMatrix(predict(svmWtFit, evaluationInd[, noNZVSet]), evalResults$CARAVAN)
svmWtEvalCM
svmWtTestCM <- confusionMatrix(predict(svmWtFit, testingInd[, noNZVSet]), testingInd$CARAVAN)
svmWtTestCM
initialRpart <- rpart(CARAVAN ~ ., data = training,
control = rpart.control(cp = 0.0001))
rpartGrid <- data.frame(cp = initialRpart$cptable[, "CP"])
cmat <- list(loss = matrix(c(0, 1, 20, 0), ncol = 2))
set.seed(1401)
cartWMod <- train(x = training[,predictors],
y = training$CARAVAN,
method = "rpart",
trControl = ctrlNoProb,
tuneGrid = rpartGrid,
metric = "Kappa",
parms = cmat)
cartWMod
library(C50)
c5Grid <- expand.grid(model = c("tree", "rules"),
trials = c(1, (1:10)*10),
winnow = FALSE)
finalCost <- matrix(c(0, 20, 1, 0), ncol = 2)
rownames(finalCost) <- colnames(finalCost) <- levels(training$CARAVAN)
set.seed(1401)
C5CostFit <- train(training[, predictors],
training$CARAVAN,
method = "C5.0",
metric = "Kappa",
tuneGrid = c5Grid,
cost = finalCost,
control = C5.0Control(earlyStopping = FALSE),
trControl = ctrlNoProb)
C5CostCM <- confusionMatrix(predict(C5CostFit, testing), testing$CARAVAN)
C5CostCM
################################################################################
### Session Information
sessionInfo()
q("no")
install.packages("earth")
install.packages( "DMwR")
install.packages( "DMwR")
install.packages("DVD")
install.packages("kernlab")
install.packages("mda")
install.packages("pROC")
install.packages("randomForest")
install.packages("rpart")
install.packages("DVD")
library(DWD)
install.packages("DWD")
install_url('https://cran.r-project.org/src/contrib/Archive/DWD/DWD_0.11.tar.gz')
library(devtools)
install_url('https://cran.r-project.org/src/contrib/Archive/DWD/DWD_0.11.tar.gz')
install_url('https://cran.r-project.org/src/contrib/Archive/DWD/DWD_0.11.tar.gz')
library(DWD)
data(ticdata)
library(caret)
?model.matrix
library(DWD)
data(ticdata)
isOrdered <- unlist(lapply(ticdata, function(x) any(class(x) == "ordered")))
recodeLevels <- function(x)
{
x <- gsub("f ", "", as.character(x))
x <- gsub(" - ", "_to_", x)
x <- gsub("-", "_to_", x)
x <- gsub("%", "", x)
x <- gsub("?", "Unk", x, fixed = TRUE)
x <- gsub("[,'\\(\\)]", "", x)
x <- gsub(" ", "_", x)
factor(paste("_", x, sep = ""))
}
convertCols <- c("STYPE", "MGEMLEEF", "MOSHOOFD",
names(isOrdered)[isOrdered])
for(i in convertCols) ticdata[,i] <- factor(gsub(" ", "0",format(as.numeric(ticdata[,i]))))
set.seed(156)
split1 <- createDataPartition(ticdata$CARAVAN, p = .7)[[1]]
other     <- ticdata[-split1,]
training  <- ticdata[ split1,]
set.seed(934)
split2 <- createDataPartition(other$CARAVAN, p = 1/3)[[1]]
evaluation  <- other[ split2,]
testing     <- other[-split2,]
predictors <- names(training)[names(training) != "CARAVAN"]
testResults <- data.frame(CARAVAN = testing$CARAVAN)
evalResults <- data.frame(CARAVAN = evaluation$CARAVAN)
trainingInd <- data.frame(model.matrix(CARAVAN ~ ., data = training))[,-1]
View(trainingInd)
str(training)
v1<-names(training)
v2<-names(trainingInd)
v2[!(v2 %in% v1)]
v3<-v2[!(v2 %in% v1)]
View(v1)
Viewas.data.frame(v1)
View(as.data.frame(v1))
View(as.data.frame(v3))
str(training$MGODRK)
unique(trainingInd$MGODRK02)
sum(trainingInd$MGODRK02)
?aggregate
aggregate(training$MGODRK,by=list(training$MGODRK,fun=sum))
aggregate(training$MGODRK,by=list(training$MGODRK),FUN=length)
aggregate(training$MGODRK,by=list(training$MGODRK),FUN=sum)
library(randomForest)
?randomForest
library(caret)
?train
getModelInfo(rf)
getModelInfo("rf")
install.packages("shiny")
install.packages("dplyr")
fname <- tempfile()
download.file("https://cran.uni-muenster.de/", destfile=fname)
file.remove(fname)
install.packages("shiny")
fname <- tempfile()
download.file("http://cran.uni-muenster.de/", destfile=fname)
file.remove(fname)
install.packages("shiny")
install.packages("shiny",options(download.file.method="libcurl"))
install.packages("shiny",options(download.file.method="libcurl",
repos = c(CRAN = "https://cran.ma.imperial.ac.uk/",
CRANextra = "https://mirrors.ebi.ac.uk/CRAN/")))
install.packages("shiny",options( repos = c(CRAN = "https://cran.ma.imperial.ac.uk/",
CRANextra = "https://mirrors.ebi.ac.uk/CRAN/")))
install.packages("shiny",options( repos = c(CRAN = "http://cran.ma.imperial.ac.uk/",
CRANextra = "http://mirrors.ebi.ac.uk/CRAN/")))
options(repos = "https://cran.rstudio.com")
install.packages("shiny")
library(shiny)
library(installr)
install.packages("installr")
install.packages("shiny")
install.packages("shiny")
rm(list=ls())
library(randomForest)
?randomForest
rm(list=ls())
gc()
setwd("C:/Users/James/Documents/James/DataScience/SantanderPrediction/")
df<-readRDS("trainchange1.rds")
require(plotrix)
example<-df[1:1000,]
table(example$Changed)
gap.barplot( example$Changed, gap=c(50,850) )
df2<-df
df2$Changed<-ifelse(df$Changed==0,"No Change",ifelse(df$Changed==1,"Upsell"),
"Cancelled")
df2$Changed<-ifelse(df$Changed==0,"No Change",ifelse(df$Changed==1,"Upsell"),"Cancelled")
df2$Changed<-ifelse(df$Changed==0,"No Change",ifelse(df$Changed==1,"Upsell","Cancelled"))
example<-df[1:1000,]
example<-df2[1:1000,]
table(example$Changed)
gap.barplot( example$Changed, gap=c(50,850) )
?gap.barplot
twogrp<-c(rnorm(10)+4,rnorm(10)+20)
vc<-as.vector((example$Changed))
View(twogroup)
View(twogrp)
gap.barplot(twogrp,gap=c(8,16),xlab="Index",ytics=c(3,6,17,20),
ylab="Group values",main="Barplot with gap")
vc<-table(example$Changed))
table(example$Changed))
table(example$Changed)
vc<-as.vector(table(example$Changed))
gap.barplot(vc, gap=c(50,850) )
gap.barplot(vc, gap=c(50,850),horiz = TRUE)
gap.barplot(vc, gap=c(50,850),horiz = TRUE,ytics = c("Cancelled","No Change","Upsell"))
gap.barplot(vc, gap=c(50,850),horiz = TRUE, xtics=c(0,25,50,850,900,950))
gap.barplot(vc, gap=c(50,850),horiz = TRUE, ytics=c(0,25,50,850,900,950))
gap.barplot(vc, gap=c(50,850),horiz = TRUE, ytics=c(0,25,45,850,900,950))
d = t(matrix( c(7,3,2,3,2,2,852,268,128,150,
127,74,5140,1681,860,963,866,
470,26419,8795,4521,5375,4514,2487),
nrow=6, ncol=4 ))
View(d)
d<-t(as.matrix(table(df2$Changed)))
View(d)
d = t(matrix( c(7,3,2,3,2,2,852,268,128,150,
127,74,5140,1681,860,963,866,
470,26419,8795,4521,5375,4514,2487),
nrow=6, ncol=4 ))
d=rbind(NA,d)
View(d)
d<-t(as.matrix(table(df2$Changed)))
View(d)
d=rbind(NA,d)
df2$Changed<-ifelse(df$Changed==0,"NoChange",ifelse(df$Changed==1,"Upsell","Cancelled"))
d<-t(as.matrix(table(df2$Changed)))
d<-select(d,No_Change,everything())
library(dplyr)
d<-select(d,No_Change,everything())
d<-as.data.frame(table(df2$Changed))
d=rbind(NA,d)
d<-select(d,No_Change,everything())
d<-select(d,"No_Change",everything())
View(d)
d<-as.data.frame(t(table(df2$Changed)))
View(d)
d<-t(as.matrix(table(df2$Changed)))
d=rbind(NA,d)
d<-as.data.frame(d)
View(d)
d<-select(d,No_Change,everything())
d<-select(d,NoChange,everything())
d<-as.matrix(d)
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),
horiz = TRUE,
xaxt='n') # disable the default x-axis
a
aa = matrix(a, nrow=nrow(d))
xticks = colMeans(aa[2:nrow(d),])
axis(1, at=xticks, lab=colname(d))
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),
xaxt='n') # disable the default x-axis
aa = matrix(a, nrow=nrow(d))
xticks = colMeans(aa[2:nrow(d),])
axis(1, at=xticks, lab=colname(d))
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000)
colMeans(aa[2:nrow(d),])
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000))
colMeans(aa[2:nrow(d),])
xticks =c(2,4,6)
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000)
xaxt='n') # disable the default x-axis
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),
xaxt='n') # disable the default x-axis
xticks =c(2,4,6)
axis(1, at=xticks, lab=colnames(d))
d<-t(as.matrix(table(df2$Changed)))
d<-select(d,NoChange,everything())
d<-as.matrix(d)
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),
xaxt='n') # disable the default x-axis
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000))
d<-as.data.frame(t(table(df2$Changed)))
d<-as.data.frame(d)
d<-t(as.matrix(table(df2$Changed)))
d<-as.data.frame(d)
d<-select(d,NoChange,everything())
d<-as.matrix(d)
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000))
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),xlim = c(0,4))
xticks =c(1,2,3)
axis(1, at=xticks, lab=colnames(d))
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),xlim = c(0,4)
,xaxt='n') # disable the default x-axis
xticks =c(1,2,3)
axis(1, at=xticks, lab=colnames(d))
a = gap.barplot(as.matrix(d),
gap=c(50000,800000),
ytics=c(0,2000,49000,800000,850000),xlim = c(0,4),
xlab = "Change Status Month to Month",
ylab="Frequency"
,xaxt='n') # disable the default x-axis
# create barplot and store returned value in 'a'
a = gap.barplot(as.matrix(d),
gap=c(55000,775000),
ytics=c(0,5000,10000,15000,20000,25000,30000,35000,40000,45000,50000,800000,850000,900000),xlim = c(0,4),
xlab = "Change Status Month to Month",
ylab="Frequency"
,xaxt='n') # disable the default x-axis
xticks =c(1,2,3)
axis(1, at=xticks, lab=colnames(d))
table(df$Changed)
a = gap.barplot(as.matrix(d),
gap=c(55000,850000),
ytics=c(0,2000,40000,45000,50000,850000,880000),xlim = c(0,4),
xlab = "Change Status Month to Month",
ylab="Frequency"
,xaxt='n') # disable the default x-axis
xticks =c(1,2,3)
axis(1, at=xticks, lab=colnames(d))
a = gap.barplot(as.matrix(d),
gap=c(55000,850000),
ytics=c(0,2000,40000,45000,50000,870000,880000),xlim = c(0,4),
xlab = "Change Status Month to Month",
ylab="Frequency"
,xaxt='n') # disable the default x-axis
xticks =c(1,2,3)
axis(1, at=xticks, lab=colnames(d))
a = gap.barplot(as.matrix(d),
gap=c(55000,860000),
ytics=c(1662,48191,875223),xlim = c(0,4),
xlab = "Change Status Month to Month",
ylab="Frequency"
,xaxt='n') # disable the default x-axis
xticks =c(1,2,3)
axis(1, at=xticks, lab=colnames(d))
Num<-as.data.frame(table(df$Num_Changes))
View(Num)
specie=c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition=rep(c("normal" , "stress" , "Nitrogen") , 4)
value=abs(rnorm(12 , 0 , 15))
data=data.frame(specie,condition,value)
View(data)
ggplot(NUm, aes(fill=condition, y=Freq )) +
geom_bar( stat="identity", position="fill")
# Stacked Percent
library(ggplot2)
ggplot(NUm, aes(fill=condition, y=Freq )) +
geom_bar( stat="identity", position="fill")
ggplot(Num, aes(fill=condition, y=Freq )) +
geom_bar( stat="identity", position="fill")
Num<-Num[Num$Var1>0,]
Num<-Num[Num$Var1 !%in% c(-1,0),]
unique(Num$Var1)
Num<-Num[2:8,]
Num<-as.data.frame(table(df$Num_Changes))
Num<-Num[2:8,]
Num<-as.data.frame(table(df$Num_Changes))
Num<-Num[3:8,]
ggplot(Num, aes(fill=condition, y=Freq )) +
geom_bar( stat="identity", position="fill")
Num$Var1<-as.character(Num$Var1)
ggplot(Num, aes(fill=condition, y=Freq )) +
geom_bar( stat="identity", position="fill")
ggplot(Num, aes(fill=Var1, y=Freq )) +
geom_bar( stat="identity", position="fill")
ggplot(Num, aes(fill=Var1, y=Freq, x=Var1 )) +
geom_bar( stat="identity", position="fill")
ggplot(Num, aes(fill=Var1, y=Freq, x=Freq )) +
geom_bar( stat="identity", position="fill")
ggplot(Num=dat, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity")
ggplot(Num, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity")
ggplot(Num, aes(fill=Var1, y=Freq, x=Freq )) +
geom_bar( stat="identity", position="fill")
ggplot(Num, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity")+coord_flip()
Num<-Num[order(-Num$Var1),]
Num<-Num[order(-Var1),]
Num2<-Num[order(-Var1),]
colnames(Num)
Num2<-Num[order(-Var1),]
Num2<-Num[order(-"Var1"),]
Num2<-Num[order(-Num[,1],]
Num2<-Num[order(-Num[,1]),]
Num2<-Num[order(-Var1),]
class(Num)
Num2<-Num[,order(-Var1)]
Num2<-Num[order(-Num$Var1),]
ggplot(Num, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity")+xlab("Number of Changes- where +ve Change Made")
colnames(Num)[2]
colnames(Num)[1]<-"Num_Changes"
ggplot(Num, aes(x=Num_Changes, y=Freq, fill=Num_Changes)) +
geom_bar(stat="identity")+xlab("Number of Changes- where +ve Change Made")
setwd("C:/Users/James/Documents/James/DataScience/SantanderPrediction/Kaggle_Santander_ProdRec/Modelling/")
list.files()
rf_basic<-readRDS("rf_mod_200_100kdown.rds")
setwd("C:/Users/James/Documents/James/DataScience/SantanderPrediction/Kaggle_Santander_ProdRec/data/")
testset<-readRDS("testsetforRF.rds")
testset$Pred_Down<-predict(rf_basic,newdata=testset)
library((randomForest))
library((randomForest)
library(randomForest)
testset$Pred_Down<-predict(rf_basic,newdata=testset)
table(testset$Pred_Down,testset$Changed)
library(caret)
confusionMatrix(testset$Pred_Down,testset$Changed)
setwd("C:/Users/James/Documents/James/DataScience/SantanderPrediction/Kaggle_Santander_ProdRec/Modelling/")
list.files()
rf5050<-readRDS("rf_mod_200_under5050.rds" )
testset$pred5050<-predict(rf5050,newdata = testset)
confusionMatrix(testset$pred5050,testset$Changed)
varImpPlot(rf5050)
?varImpPlot
varImpPlot(rf5050,n.var=10)
par(mar = rep(2, 4))
varImpPlot(rf5050,n.var=10)
varImpPlot(rf5050,n.var=10)
varImpPlot(rf5050,,type=2,n.var=10)
install.packages('xgboost', dependencies=TRUE, repos='https://ftp.ussg.iu.edu/CRAN/')
data(agaricus.train, package='xgboost')
library(xgboost)
train <- agaricus.train
dim(train)
dims(train)
class(train)
dim(train$data)
head(train$data)
ex<-train$data
ex<-as.data.frame(train$data)
play<-testset %>%
select_if(is.factor)
colnames(play)
play[,2:15]
play<-play[,2:15]
colnames(play)
mm_1<-model.matrix(~ind_empleado-1,head(diseaseInfo))
mm_1<-model.matrix(~ind_empleado-1,head(play))
View(mm_1)
mm_1<-model.matrix(~play[,1]-1,head(play))
mm_1<-model.matrix(~colnames(play)[1]-1,head(play))
val<-play[,1]
a<-colnames(val)
a
mm_1<-model.matrix(paste(a)-1,head(play))
mm_1<-model.matrix(print(a)-1,head(play))
a1<-colnames(val)
get(paste("a",1,sep=""))
eval(parse(text=a1))
mm_1<-model.matrix(eval(parse(text=a1))-1,head(play))
mm_1<-model.matrix(eval(a1)-1,head(play))
?model.matrix
assign(paste(colnames(val), sep=""),val)
dd <- data.frame(a = gl(3,4), b = gl(4,1,12))
dd
?gl
dd2<-model.matrix(~ a + b, dd)
View(dd2)
mm_1<-model.matrix(~ . -1,head(play))
View(mm_1)
getwd()
#Have 18 month of data - take 3 month snapshots of data, find difference, append
#read in the data and get create and save data sets to speed up replicability
setwd("C:/Users/James/Documents/James/DataScience/SantanderPrediction")
list.files()
#build as function
train<-readRDS(train.rds)
#build as function
train<-readRDS("train.rds")
unique(train$fecha_dato)
df<-fread("train_ver2.csv",nrows=-1)
#Have 18 month of data - take 3 month snapshots of data, find difference, append
#read in the data and get create and save data sets to speed up replicability
library(dplyr)
library(data.table)
df<-fread("train_ver2.csv",nrows=-1)
dec15<-df[df$fecha_dato=="2015-12-28",]
sep15<-df[df$fecha_dato=="2015-09-28",]
jun15<-df[df$fecha_dato=="2015-06-28",]
mar15<-df[df$fecha_dato=="2015-03-28",]
#repeat for April as need for test set
jan16<-df[df$fecha_dato=="2016-01-28",]
oct15<-df[df$fecha_dato=="2015-10-28",]
jul15<-df[df$fecha_dato=="2015-07-28",]
apr15<-df[df$fecha_dato=="2015-04-28",]
setwd("C:/Users/James/Documents/James/DataScience/SantanderPrediction/Kaggle_Santander_ProdRec/data")
saveRDS(dec15,"dec15.rds")
saveRDS(sep15,"sep15.rds")
saveRDS(jun15,"jun15.rds")
saveRDS(mar15,"mar15.rds")
saveRDS(jan16,"jan16.rds")
saveRDS(oct15,"oct15.rds")
saveRDS(jul15,"jul15.rds")
saveRDS(apr15,"apr15.rds")
snapshot<-dec15
jj<-3
#merge the train & snapshot, keep all.x - ensures all aligned for doing diff
colnames(snapshot)<-paste(colnames(snapshot),jj,sep="_")
#which column should this be in
colnames(snapshot)
print("hello")
